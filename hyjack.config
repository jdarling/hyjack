{
/*
  'Find what events are available for ClientRequest': {
    type: 'event',
    method: 'trigger',
    unit: 'http',
    object: 'ClientRequest',
    callback: function(event){
      hyjack.emit('console::log', 'ClientRequest::'+event+' has '+arguments.length+' arguments');
    }
  },
  'Find what events are available for Agent': {
    type: 'event',
    method: 'trigger',
    unit: 'http',
    object: 'Agent',
    callback: function(event){
      hyjack.emit('console::log', 'Agent::'+event+' has '+arguments.length+' arguments');
    }
  },
//*/
  'Init a conversation object to track round trip': {
    type: 'event',
    method: 'trigger',
    unit: 'http',
    object: 'ClientRequest',
    event: 'socket',
    callback: function(event, socket){
      socket._httpMessage._conversation = {
        id: uuid(),
        start: counter(),
        started: new Date()
      };
    }
  },
  'Complete conversation object and log round trip': {
    type: 'event',
    method: 'trigger',
    unit: 'http',
    object: 'Agent',
    event: 'free',
    callback: function(event, socket){
      var conversation = socket._httpMessage._conversation;
      conversation.complete = counter();
      conversation.duration = conversation.complete - conversation.start;
      conversation.completed = new Date();
      try{ // capture the uri component of the req object if it exists
        conversation.uri = socket._httpMessage.res.request.uri;
      }catch(e){
      }
      //hyjack.emit('console::log', ['HTTP Call Complete:', conversation]);
      hyjack.emit('console::log', socket._httpMessage.method+': '+conversation.uri.href+' took '+Math.ceil(conversation.duration)+'ms');
    }
  }
}
