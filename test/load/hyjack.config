{
  'Capture all traffic going to the outside world': {
    type: 'event',
    method: 'timer',
    start: {
      unit: 'http',
      object: 'ClientRequest',
      event: 'socket',
      callback: function(event, socket){
        this.map.set(socket._httpMessage, {
          start: this.counter,
          started: new Date()
        });
      }
    },
    complete: {
      unit: 'http',
      object: 'Agent',
      event: 'free',
      callback: function(event, socket){
        var conversation = this.map.get(socket._httpMessage);
        if(!conversation){
          return;
        }
        // Make sure you cleanup after yourself
        this.map.delete(socket._httpMessage);
        conversation.complete = this.counter;
        conversation.duration = conversation.complete - conversation.start;
        conversation.completed = new Date();
        try{ // capture the uri component of the req object if it exists
          conversation.uri = socket._httpMessage.res.request.uri;
        }catch(e){
        }
        hyjack.emit('hyjack::log', ['HTTP Response: ', conversation]);
      }
    }
  }
}
